# The MIT License
#
# Copyright (c) 2004-, Kohsuke Kawaguchi, Sun Microsystems, Inc., and a number of other of contributors
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

# \ 
# Creates a new view by reading stdin as a XML configuration.
CreateViewCommand.ShortDescription=
# \ 
# Creates a new node by reading stdin as a XML configuration.
CreateNodeCommand.ShortDescription=
# \ 
# Dumps the job definition XML to stdout.
GetJobCommand.ShortDescription=
# \ 
# Updates the job definition XML from stdin. The opposite of the get-job command.
UpdateJobCommand.ShortDescription=
# \ 
# Updates the view definition XML from stdin. The opposite of the get-view command.
UpdateViewCommand.ShortDescription=
# Update/set the build parameter of the current build in progress.
SetBuildParameterCommand.ShortDescription=
# \ 
# Lists all jobs in a specific view or item group.
ListJobsCommand.ShortDescription=
# Deletes node(s)
DeleteNodeCommand.ShortDescription=
# \ 
# Creates a new job by reading stdin as a configuration XML file.
CreateJobCommand.ShortDescription=
# \ 
# Deletes view(s).
DeleteViewCommand.ShortDescription=
# \ 
# Lists all the available commands or a detailed description of single command.
HelpCommand.ShortDescription=
# Retrieves console output of a build.
ConsoleCommand.ShortDescription=
# Copies a job.
CopyJobCommand.ShortDescription=
# \ 
# Reports your credential and permissions.
WhoAmICommand.ShortDescription=
# \ 
# Builds a job, and optionally waits until its completion.
BuildCommand.ShortDescription=
# Installing {0} from update center
InstallPluginCommand.InstallingFromUpdateCenter=
# \ 
# Removes jobs from view.
RemoveJobFromViewCommand.ShortDescription=
# \ 
# Saves the current credential to allow future commands to run without explicit credential information.
LoginCommand.ShortDescription=
# \ 
# Installs a plugin either from a file, an URL, or from update center. 
InstallPluginCommand.ShortDescription=
# \ 
# Adds jobs to view.
AddJobToViewCommand.ShortDescription=
# \ 
# Performs automatic tool installation, and print its location to stdout. Can be only called from inside a build.
InstallToolCommand.ShortDescription=
# Installing a plugin from local file: {0}
InstallPluginCommand.InstallingPluginFromLocalFile=
# \ 
# Runs an interactive groovy shell.
GroovyshCommand.ShortDescription=
# \ 
# Dumps the changelog for the specified build(s).
ListChangesCommand.ShortDescription=
# Installing a plugin from {0}
InstallPluginCommand.InstallingPluginFromUrl=
# \ 
# Cannot build {0} because it is disabled.
BuildCommand.CLICause.CannotBuildDisabled=
# \ 
# Sets the description of a build.
SetBuildDescriptionCommand.ShortDescription=
# \ 
# Dumps the view definition XML to stdout.
GetViewCommand.ShortDescription=
# \ 
# Reads stdin and sends that out as an e-mail.
MailCommand.ShortDescription=
# {0} is neither a valid file, URL, nor a plugin artifact name in the update center
InstallPluginCommand.NotAValidSourceName=
# \ 
# Sets the displayName of a build.
SetBuildDisplayNameCommand.ShortDescription=
# Reload job(s)
ReloadJobCommand.ShortDescription=
# \ 
# Updates the node definition XML from stdin. The opposite of the get-node command.
UpdateNodeCommand.ShortDescription=
# Started from command line by {0}
BuildCommand.CLICause.ShortDescription=
# \ 
# Dumps the node definition XML to stdout.
GetNodeCommand.ShortDescription=
# \ 
# Cannot build {0} for unknown reasons.
BuildCommand.CLICause.CannotBuildUnknownReasons=
# Resume using a node for performing builds, to cancel out the earlier "offline-node" command.
OnlineNodeCommand.ShortDescription=
# \ 
# Executes the specified Groovy script. 
GroovyCommand.ShortDescription=
# {0} looks like a short plugin name. Did you mean \u2018{1}\u2019?
InstallPluginCommand.DidYouMean=
# \ 
# Sets the result of the current build. Works only if invoked from within a build.
SetBuildResultCommand.ShortDescription=
# No update center data is retrieved yet from: {0}
InstallPluginCommand.NoUpdateDataRetrieved=
# \ 
# Cannot build {0} because its configuration has not been saved.
BuildCommand.CLICause.CannotBuildConfigNotSaved=
# \ 
# Deletes build record(s).
DeleteBuildsCommand.ShortDescription=
# Note that no update center is defined in this Jenkins.
InstallPluginCommand.NoUpdateCenterDefined=
# \ 
# Deletes the credential stored with the login command. 
LogoutCommand.ShortDescription=
# \ 
# Outputs the current version.
VersionCommand.ShortDescription=
# Outputs the session ID, which changes every time Jenkins restarts.
SessionIdCommand.ShortDescription=
# \ 
# Deletes job(s).
DeleteJobCommand.ShortDescription=
# \ 
# Outputs a list of installed plugins.
ListPluginsCommand.ShortDescription=
